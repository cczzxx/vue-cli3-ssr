{"remainingRequest":"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/babel-loader/lib/index.js!/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/eslint-loader/index.js??ref--13-0!/Users/chenzexu/Desktop/vue/vue-cli/vue-test/src/entry-server.js","dependencies":[{"path":"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/src/entry-server.js","mtime":1564935510000},{"path":"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/core-js/modules/es6.array.iterator.js\";\nimport \"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/core-js/modules/es6.promise.js\";\nimport \"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/core-js/modules/es6.object.assign.js\";\nimport \"/Users/chenzexu/Desktop/vue/vue-cli/vue-test/node_modules/core-js/modules/es7.promise.finally.js\";\nimport { createApp } from \"./main\"; //Server entry是一个使用export导出的函数。\n//主要负责调用组件内定义的获取数据的方法，获取到SSR渲染所需数据，并存储到上下文环境中。这个函数会在每一次的渲染中重复的调用\n\nexport default (function (context) {\n  // 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，\n  // 以便服务器能够等待所有的内容在渲染前，\n  // 就已经准备就绪。\n  return new Promise(function (resolve, reject) {\n    var _createApp = createApp(),\n        app = _createApp.app,\n        router = _createApp.router; // 设置服务器端 router 的位置\n\n\n    router.push(context.url); // 等到 router 将可能的异步组件和钩子函数解析完\n\n    router.onReady(function () {\n      var matchedComponents = router.getMatchedComponents(); // 匹配不到的路由，执行 reject 函数，并返回 404\n\n      if (!matchedComponents.length) {\n        return reject({\n          code: 404\n        });\n      } // Promise 应该 resolve 应用程序实例，以便它可以渲染\n\n\n      resolve(app);\n    }, reject);\n  });\n});",{"version":3,"sources":["/Users/chenzexu/Desktop/vue/vue-cli/vue-test/src/entry-server.js"],"names":["createApp","context","Promise","resolve","reject","app","router","push","url","onReady","matchedComponents","getMatchedComponents","length","code"],"mappings":";;;;AAAA,SAASA,SAAT,iB,CAEA;AACA;;AAEA,gBAAe,UAAAC,OAAO,EAAI;AACxB;AACA;AACA;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,qBACdJ,SAAS,EADK;AAAA,QAC9BK,GAD8B,cAC9BA,GAD8B;AAAA,QACzBC,MADyB,cACzBA,MADyB,EAGtC;;;AACAA,IAAAA,MAAM,CAACC,IAAP,CAAYN,OAAO,CAACO,GAApB,EAJsC,CAMtC;;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,YAAM;AACnB,UAAMC,iBAAiB,GAAGJ,MAAM,CAACK,oBAAP,EAA1B,CADmB,CAEnB;;AACA,UAAI,CAACD,iBAAiB,CAACE,MAAvB,EAA+B;AAC7B,eAAOR,MAAM,CAAC;AACZS,UAAAA,IAAI,EAAE;AADM,SAAD,CAAb;AAGD,OAPkB,CAQnB;;;AACAV,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD,KAVD,EAUGD,MAVH;AAWD,GAlBM,CAAP;AAmBD,CAvBD","sourcesContent":["import { createApp } from \"./main\";\n\n//Server entry是一个使用export导出的函数。\n//主要负责调用组件内定义的获取数据的方法，获取到SSR渲染所需数据，并存储到上下文环境中。这个函数会在每一次的渲染中重复的调用\n\nexport default context => {\n  // 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，\n  // 以便服务器能够等待所有的内容在渲染前，\n  // 就已经准备就绪。\n  return new Promise((resolve, reject) => {\n    const { app, router } = createApp();\n\n    // 设置服务器端 router 的位置\n    router.push(context.url);\n\n    // 等到 router 将可能的异步组件和钩子函数解析完\n    router.onReady(() => {\n      const matchedComponents = router.getMatchedComponents();\n      // 匹配不到的路由，执行 reject 函数，并返回 404\n      if (!matchedComponents.length) {\n        return reject({\n          code: 404\n        });\n      }\n      // Promise 应该 resolve 应用程序实例，以便它可以渲染\n      resolve(app);\n    }, reject);\n  });\n};\n"]}]}